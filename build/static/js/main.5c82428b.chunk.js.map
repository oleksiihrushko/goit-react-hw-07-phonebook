{"version":3,"sources":["components/contactList/ContactList.module.css","components/contactItem/ContactItem.module.css","components/logo/Logo.module.css","components/App.module.css","components/contactForm/ContactForm.module.css","redux/theme/themeActions.js","service/themeConfig.js","components/logo/Logo.js","redux/contacts/contactsActions.js","components/contactForm/ContactForm.js","components/filter/Filter.js","components/contactItem/ContactItem.js","components/contactList/ContactList.js","components/App.js","redux/contacts/contactsReducer.js","redux/theme/themeReducer.js","redux/store.js","index.js"],"names":["module","exports","changeTheme","createAction","themeConfig","light","headerBg","fontColor","bodybg","dark","logoStyles","appear","styles","appearActive","Logo","CSSTransition","in","timeout","classNames","unmountOnExit","addContact","name","number","payload","contact","id","uuid","removeContact","changeFilter","ContactForm","state","changeHandler","e","target","value","setState","handleSubmit","preventDefault","props","onSubmit","this","className","contactForm","style","borderRadius","type","onChange","marginBottom","padding","Component","connect","contactsActions","mapDispatchToProps","onChangeFilter","contacts","filter","dispatch","ownProps","onRemoveContact","listItem","listItemP","listItemButton","onClick","itemMove","enter","enterActive","exit","exitActive","items","toLowerCase","includes","TransitionGroup","component","map","key","theme","themeColor","dicpatch","themeActions","themeState","color","background","length","sectionTitle","createReducer","action","find","alert","combineReducers","themeReducer","persistConfig","storage","rootReducer","contactsReducer","persistedReducer","persistReducer","store","configureStore","reducer","middleware","thunk","persistStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c82428b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"ContactList_enter__1L3gx\",\"enterActive\":\"ContactList_enterActive__ZmVxH\",\"exit\":\"ContactList_exit__2JBne\",\"exitActive\":\"ContactList_exitActive__3woZ-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactItem_listItem__3giQW\",\"listItemP\":\"ContactItem_listItemP__3_OtK\",\"listItemButton\":\"ContactItem_listItemButton__2QfpJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Logo_logo__3khlX\",\"appear\":\"Logo_appear__284_Q\",\"appearActive\":\"Logo_appearActive__Sznz8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionTitle\":\"App_sectionTitle__3CqXU\",\"light\":\"App_light__2f68w\",\"dark\":\"App_dark__1rKcP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__hsq5a\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst changeTheme = createAction('theme/changeTheme');\r\n\r\nexport default { changeTheme };\r\n","const themeConfig = {\r\n  light: {\r\n    headerBg: '#F7B30C',\r\n    fontColor: 'black',\r\n    bodybg: 'white',\r\n  },\r\n  dark: {\r\n    headerBg: '#3c3c3c',\r\n    fontColor: 'white',\r\n    bodybg: 'black',\r\n  },\r\n};\r\n\r\nexport default themeConfig;\r\n","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport styles from './Logo.module.css';\r\n\r\nconst logoStyles = {\r\n  appear: styles.appear,\r\n  appearActive: styles.appearActive,\r\n};\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <CSSTransition\r\n      in={true}\r\n      appear={true}\r\n      timeout={500}\r\n      classNames={logoStyles}\r\n      unmountOnExit\r\n    >\r\n      <h1>Phonebook</h1>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nconst addContact = createAction('contacts/add', (name, number) => ({\r\n  payload: {\r\n    contact: { id: uuid(), name, number },\r\n  },\r\n}));\r\n\r\nconst removeContact = createAction('contacts/remove');\r\n\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nexport default { addContact, removeContact, changeFilter };\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contactsActions';\r\nimport styles from './ContactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  changeHandler = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n\r\n    this.props.onSubmit(name, number);\r\n\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className={styles.contactForm} onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name\r\n          <br />\r\n          <input\r\n            style={{ borderRadius: 4 }}\r\n            name=\"name\"\r\n            type=\"text\"\r\n            value={name}\r\n            onChange={this.changeHandler}\r\n          />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Number\r\n          <br />\r\n          <input\r\n            style={{ borderRadius: 4, marginBottom: 5 }}\r\n            name=\"number\"\r\n            type=\"text\"\r\n            value={number}\r\n            onChange={this.changeHandler}\r\n          />\r\n        </label>\r\n        <br />\r\n        <button style={{ borderRadius: 4, padding: 4 }} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, {\r\n  onSubmit: contactsActions.addContact,\r\n})(ContactForm);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contactsActions';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value, onChangeFilter }) => (\r\n  <form>\r\n    <label>\r\n      Find contacts by name\r\n      <br />\r\n      <input\r\n        style={{ borderRadius: 4 }}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={e => onChangeFilter(e.target.value)}\r\n      ></input>\r\n    </label>\r\n  </form>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    value: state.contacts.filter,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: contactsActions.changeFilter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contactsActions';\r\nimport styles from './ContactItem.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactItem = ({ contact: { id, name, number }, onRemoveContact }) => {\r\n  return (\r\n    <li className={styles.listItem}>\r\n      <p className={styles.listItemP}>\r\n        {name}: {number}\r\n      </p>\r\n      <button\r\n        className={styles.listItemButton}\r\n        onClick={onRemoveContact}\r\n        type=\"button\"\r\n      >\r\n        Удалить\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  onRemoveContact: () =>\r\n    dispatch(contactsActions.removeContact(ownProps.contact.id)),\r\n});\r\n\r\nContactItem.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onRemoveContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactItem);\r\n","import React from 'react';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport styles from './ContactList.module.css';\r\nimport ContactItem from '../contactItem/ContactItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst itemMove = {\r\n  enter: styles.enter,\r\n  enterActive: styles.enterActive,\r\n  exit: styles.exit,\r\n  exitActive: styles.exitActive,\r\n};\r\n\r\nconst ContactList = ({ contacts }) => {\r\n  return (\r\n    <TransitionGroup component=\"ul\">\r\n      {contacts &&\r\n        contacts.map(contact => (\r\n          <CSSTransition key={contact.id} timeout={250} classNames={itemMove}>\r\n            <ContactItem contact={contact} />\r\n          </CSSTransition>\r\n        ))}\r\n    </TransitionGroup>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\nconst mapStateToProps = ({ contacts }) => ({\r\n  contacts: contacts.items.filter(contact =>\r\n    contact.name.toLowerCase().includes(contacts.filter.toLowerCase()),\r\n  ),\r\n});\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport themeActions from '../redux/theme/themeActions';\r\nimport themeConfig from '../service/themeConfig';\r\nimport styles from './App.module.css';\r\nimport Logo from './logo/Logo';\r\nimport ContactForm from './contactForm/ContactForm';\r\nimport Filter from './filter/Filter';\r\nimport ContactList from './contactList/ContactList';\r\n\r\nconst App = ({ contacts, theme, changeTheme }) => {\r\n  let themeState = 'light';\r\n  theme ? (themeState = 'light') : (themeState = 'dark');\r\n  return (\r\n    <div\r\n      style={{\r\n        color: themeConfig[themeState].fontColor,\r\n        background: themeConfig[themeState].bodybg,\r\n      }}\r\n    >\r\n      <Logo />\r\n      <button onClick={changeTheme}>Change theme</button>\r\n      <ContactForm />\r\n      {contacts && contacts.length > 1 && <Filter />}\r\n      <h2 className={styles.sectionTitle}>Contacts</h2>\r\n      <ContactList />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: state.contacts.items,\r\n    theme: state.themeColor,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dicpatch => ({\r\n  changeTheme: () => dicpatch(themeActions.changeTheme()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport contactsActions from './contactsActions';\r\n\r\nconst onAddContact = (state, action) => {\r\n  if (\r\n    state &&\r\n    state.find(contact => action.payload.contact.name === contact.name)\r\n  ) {\r\n    alert('User with this name is already exist');\r\n    return state;\r\n  } else {\r\n    return [...state, action.payload.contact];\r\n  }\r\n};\r\nconst onRemoveContact = (state, action) =>\r\n  state.filter(contact => contact.id !== action.payload);\r\nconst onChangeFilter = (state, action) => action.payload;\r\n\r\nconst items = createReducer([], {\r\n  [contactsActions.addContact]: onAddContact,\r\n  [contactsActions.removeContact]: onRemoveContact,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [contactsActions.changeFilter]: onChangeFilter,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport themeActions from './themeActions';\r\n\r\nconst themeReducer = createReducer(true, {\r\n  [themeActions.changeTheme]: state => {\r\n    return !state;\r\n  },\r\n});\r\n\r\nexport default themeReducer;\r\n","import { configureStore, combineReducers } from '@reduxjs/toolkit';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport thunk from 'redux-thunk';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport contactsReducer from './contacts/contactsReducer';\r\nimport themeReducer from './theme/themeReducer';\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n  themeColor: themeReducer,\r\n});\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: [thunk],\r\n});\r\n\r\npersistStore(store);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport App from './components/App';\r\n// import ThemeContext from './contexts/ThemeContext';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}